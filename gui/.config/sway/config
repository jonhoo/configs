### Auto-float
for_window {
    [class="TouchPortal"] floating enable, border none
    [class="TouchPortal" title="^Touch Portal$"] floating disable

}
for_window {
  [window_role="pop-up"] floating enable
  [window_role="bubble"] floating enable
  [window_role="dialog"] floating enable
  [window_type="dialog"] floating enable
}

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
input type:keyboard {
    xkb_options ctrl:nocaps,compose:rctrl
}

### Style configuration
gaps inner 1
gaps outer 3
default_border pixel 1
#
# Colors
#
# class                 border  backgr. text    indicator child_border
client.focused          #33ccff #285577 #ffffff #33ccff   #33ccff
client.focused_inactive #595959 #5f676a #ffffff #595959   #595959
client.unfocused        #595959 #222222 #888888 #595959   #595959
client.urgent           #2f343a #900000 #ffffff #900000   #900000
client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c
# Allow tiny floating windows
floating_minimum_size 10 x 10

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+a exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+Space exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym Alt+$left focus left
    bindsym Alt+$down focus down
    bindsym Alt+$up focus up
    bindsym Alt+$right focus right

    # Move the focused window with the same, but add Shift
    bindsym Alt+Shift+$left move left
    bindsym Alt+Shift+$down move down
    bindsym Alt+Shift+$up move up
    bindsym Alt+Shift+$right move right
#
# Workspaces:
#
    # Quick-jump/move next/previous
    # NOTE: the exec is needed to simulate create-on-demand
    # Inlined rather than standalone script for easy portability.
    # Would love to quote this better, but https://github.com/swaywm/sway/issues/5931
    bindsym $mod+$up exec swaymsg workspace number "$(p=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.current_workspace') ; if test $p -eq 1 ; then echo 1 ; else echo $p-1 | bc ; fi)"
    bindsym $mod+$down exec swaymsg workspace number "$(echo $(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.current_workspace')+1 | bc)"
    bindsym $mod+Shift+$up exec swaymsg move container to workspace number "$(p=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.current_workspace') ; if test $p -eq 1 ; then echo 1 ; else echo $p-1 | bc ; fi)"
    bindsym $mod+Shift+$down exec swaymsg move container to workspace number "$(echo $(swaymsg -t get_outputs | jq -r '.[] | select(.focused)' | jq -r '.current_workspace')+1 | bc)"
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    #bindsym $mod+b splith
    #bindsym $mod+v splitv

    # Switch the current container between different layout styles
    #bindsym $mod+s layout stacking
    #bindsym $mod+w layout tabbed
    #bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+Return floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+Return focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+o focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
#
# Utilities:
#
    # Special keys to adjust volume via PulseAudio
    bindsym --locked XF86AudioMute exec pactl set-sink-mute \@DEFAULT_SINK@ toggle
    bindsym --locked XF86AudioLowerVolume exec pactl set-sink-volume \@DEFAULT_SINK@ -3%
    bindsym --locked XF86AudioRaiseVolume exec pactl set-sink-volume \@DEFAULT_SINK@ +3%
    bindsym --locked XF86AudioMicMute exec pactl set-source-mute \@DEFAULT_SOURCE@ toggle
    # Extra keys for play/pause/move
    bindsym --locked $mod+p exec playerctl play-pause
    bindsym --locked $mod+i exec playerctl next
    bindsym --locked $mod+u exec playerctl previous
    # Special keys to swap between Bluetooth audio and speakers
    bindsym --locked $mod+t exec toggle-audio.sh
    # Special keys to adjust brightness via brightnessctl
    bindsym --locked XF86MonBrightnessDown exec brightnessctl set 3%-
    bindsym --locked XF86MonBrightnessUp exec brightnessctl set 3%+
    # Special key to take a screenshot with grim
    bindsym Print exec grim
    bindsym Shift+Print exec grim -g "$(slurp)"
    # And the same for when there is no PrtScr button
    bindsym $mod+Home exec grim -g "$(slurp)"
#
# Programs:
#
    bindsym $mod+e exec alacritty -t mutt -e tmux new-session -A -s mail bash -ic "neomutt"
    bindsym $mod+l exec waylock
    bindsym $mod+equal exec rofi -show calc -modi calc -no-show-match -no-sort -calc-command "echo '{result}' | wl-copy"
#
# Handier typing
#
    # Norwegian
    bindsym Alt+a exec wtype -k 'aring'
    bindsym Alt+o exec wtype -k 'oslash'
    bindsym Alt+e exec wtype -k 'ae'
    # These don't work b/c of https://github.com/atx/wtype/issues/39
    bindsym Alt+Shift+a exec wtype -M shift -k 'aring'
    bindsym Alt+Shift+o exec wtype -M shift -k 'oslash'
    bindsym Alt+Shift+e exec wtype -M shift -k 'ae'
    # Common symbols
    bindsym Alt+minus exec wtype -k 'emdash'
    bindsym Alt+Shift+minus exec wtype -k 'emdash'
#
# Emoji mode
#
mode "emoji" {
    bindsym t exec wtype 'üéâ'
    bindsym apostrophe exec wtype 'üòÖ'
    bindsym 3 exec wtype '‚ù§Ô∏è'
    bindsym equal exec wtype 'üëç'

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym Alt+q mode "emoji"
#
# OBS
#
# It'd be nice if we could instead just globally pass these keys to OBS, but
# there doesn't appear to be a way to do so at the moment.
#
    bindsym KP_HOME exec obs-do set-scene 'Desktop (Q&A)'
    bindsym KP_INSERT exec obs-do set-scene 'Desktop (code)'
    bindsym KP_MULTIPLY exec obs-do set-scene 'JustJ'
    bindsym KP_END exec obs-do set-scene 'Webcam'
    bindsym KP_BEGIN exec obs-do set-scene 'Phonecam'
    bindsym KP_UP exec obs-do set-scene 'Together'
    bindsym KP_PRIOR exec obs-do set-scene 'Desktop (Rustacean Station)'
    bindsym KP_DELETE exec obs-do toggle-mute
    bindsym Shift+KP_SUBTRACT exec obs-do toggle-stream
    bindsym Shift+KP_ADD exec obs-do toggle-record

#
# macOS deprogramming:
#
    bindsym $mod+v exec wl-paste

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
# bar {
#     position top
# 
#     # When the status_command prints a new line to stdout, swaybar updates.
#     # The default just shows the current date and time.
#     status_command while date +'%Y-%m-%d %X'; do sleep 1; done
# 
#     colors {
#         statusline #ffffff
#         background #323232
#         inactive_workspace #32323200 #32323200 #5c5c5c
#     }
# }

include /etc/sway/config.d/*
